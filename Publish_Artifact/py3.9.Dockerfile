# This docker file is responsible to execute the main script and publish artifacts generated by main.py

# Using argument from docker compose environment

FROM python:3.9

ENV pythonversion=3.9

ENV WORK_DIR=/app
ENV entryfilename=main
ENV REQUIREMENTS=requirements.txt

RUN echo "output created with pythonVersion: ${pythonversion}"
WORKDIR ${WORK_DIR}

# Install dependencies
RUN apt-get update
# Python development libraries
RUN apt-get install -y python3-dev python3-pip
# Required libraries to generated dynamic linked library from python file
# RUN apt-get install -y mingw-w64-x86-64-dev gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
RUN apt-get install -y gcc-mingw-w64-x86-64
# VCS
RUN apt-get install -y git


# Clone docker repository
# RUN git clone https://github.com/gahan9/DockerExamples.git ${WORK_DIR}
ADD . /app/Publish_Artifact

WORKDIR ${WORK_DIR}/Publish_Artifact

# Install PyPi requirements for project
RUN ls -la ${WORKDIR}

# RUN echo WORK_DIR - ${WORK_DIR}
# RUN echo REQUIREMENTS - ${REQUIREMENTS}
# RUN echo entryfilename - ${entryfilename}
# RUN echo pythonversion - ${pythonversion}

RUN pip install -r ${REQUIREMENTS}

# Build Artifact
RUN python setup.py build_ext --inplace

# RUN echo file name: ${entryfilename}, python version: $pythonversion
RUN cythonize -a -i ${entryfilename}.py
RUN rm -rf ${entryfilename}.c ${entryfilename}.html

# Make sure we endup with expected output result of artifact
RUN mv ${entryfilename}.cpython* ${entryfilename}.cpython-${pythonversion}.so

RUN echo Successfully built ${entryfilename}.cpython-${pythonversion}.so

# CMD [ "cythonize", "-a", "-i", "${entryfilename}.py" ]

ENTRYPOINT [ "/bin/bash" ]
